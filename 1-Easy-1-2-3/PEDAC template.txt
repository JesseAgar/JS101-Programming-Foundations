//  UNDERSTAND THE PROBLEM
// * UNDERSTAND
//   - read the problem description 
//   - examine all examples
//   - ask clarifying questions
// * INPUTS
// ? 
// * OUTPUTS
// ? 
// * RULES AND REQUIREMENTS
// ? 
// * MENTAL MODEL
// ? 
// * EXAMPLES/TEST CASES
//   - understand how the input translates to output
//   - identify edge cases
//   - create the test cases and confirm outputs
// * VALID CASES  */
// * EDGE CASES
// * DATA STRUCTURES
//   - what sort of actions do you have to do (sort, collect, filter, etc.)
//   - what kind of data are you primarily dealing with? (strings, arrays, numbers, objects, etc.)
//   - this helps you to focus on methods for these types
// ? 
// * ALGORITHM
//   - step by step process that takes you from input to output
//   - handles edges cases and valid example inputs
//   - your code will depend on your algorithm
// ? 
// ? 
// ? 
// * CODE
//   - time to write the code!
//   - use everything you've gathered in your pedac to write the code 
//   Debug (if needed)
//   - if there are errors in output, don't panic!
//   - carefully review algorithm before looking at your code
//   - once you've identified the issue, change the algorithm first, then fix the code
//   - try again!
